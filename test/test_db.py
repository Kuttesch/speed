import sqlite3
import math
import pytest

DB_PATH = "./backend/app/src/main/assets/speed_limits.sqlite"

# Format: ((lat, lon), expected_speed_limit)
# RANDOM_COORDS = [
#     ((47.93635731025819, 12.231937785589084), 50),
#     ((47.934492404532385, 12.23412628776745), 100),
#     ((47.92093511690496, 12.242896571965668), 100),
#     ((48.141345874030534, 11.985452728915337), 100),
    
# ]
RANDOM_COORDS = [
    ((47.8896782, 11.684023700000001), 70),
    ((47.8966742, 11.677071033333334), 70),
    ((47.90779801666667, 11.675981325), 50),
    ((47.90952546666667, 11.686408666666665), 30),
    ((47.914335725, 11.67270865), 50),
    ((47.9088124375, 11.674975375), 50),
    ((47.9099322, 11.6822669875), 50),
    ((47.916019325, 11.680075425), 30),
    ((47.91592077222222, 11.676843344444444), 50),
    ((47.91463893333333, 11.672769699999998), 50),
    ((48.15554435, 11.423141099999999), 30),
    ((48.155808699999994, 11.422551899999998), 30),
    ((48.17562088571429, 11.752688557142857), 30),
    ((48.17328476875, 11.4074404875), 50),
    ((48.157877944444444, 11.420625600000001), 30),
    ((48.17433876, 11.75655553), 30),
    ((48.394688328571426, 10.837338685714286), 30),
    ((48.39393079166666, 10.837150766666667), 30),
    ((48.392230826923075, 10.840554511538462), 30),
    ((48.38987995238095, 10.839345833333333), 30),
    ((48.390657725, 10.83901605), 30),
    ((48.39437579166667, 10.836708025), 30),
    ((48.39122858333334, 10.839488966666666), 30),
    ((48.39630498333333, 10.837526933333335), 30),
    ((48.39630134, 10.83895414), 30),
    ((48.39192307727273, 10.833329718181817), 30),
    ((48.400780225, 10.8259006), 30),
    ((48.389352825, 10.838308125), 50),
    ((48.39312128823529, 10.827106223529412), 50),
    ((48.38568626, 10.82838292), 30),
    ((48.38483335294117, 10.826126411764706), 30),
    ((48.383723333333336, 10.828309599999999), 30),
    ((48.395023472727274, 10.830992881818181), 50),
    ((48.39540121, 10.82544415), 50),
    ((48.40073603333334, 10.822519466666668), 50),
    ((48.38641515, 10.84203475), 50),
    ((48.40668776363636, 10.8508324), 30),
    ((48.40585356363636, 10.852201), 30),
    ((48.4046905, 10.852688185714285), 30),
    ((48.396273931578946, 10.85354792894737), 30),
    ((48.394579255555556, 10.8570906), 30),
    ((48.39565814, 10.85626708), 30),
    ((48.39673275, 10.8595125125), 30),
    ((48.39554697142857, 10.85201547142857), 30),
    ((48.39578064, 10.85339228), 30),
    ((48.38638950625, 10.85682813125), 50),
    ((48.402302626923074, 10.850147115384617), 30),
    ((48.39891454285714, 10.855255928571427), 30),
    ((48.40823031428572, 10.822395714285715), 50),
    ((48.407842075, 10.821781825), 50),
    ((48.413373719999996, 10.827577569999999), 30),
    ((48.408945641176466, 10.825662723529412), 50),
    ((48.40894908260869, 10.829102052173914), 50),
    ((48.385361724999996, 10.829544649999999), 30),
    ((48.38427401538461, 10.827026669230769), 30),
    ((48.139567766666666, 11.401286116666666), 50),
    ((48.177923199999995, 11.40506625), 30),
    ((48.179521566666665, 11.398812866666667), 50),
    ((48.15653006666667, 11.416285233333333), 30),
    ((48.15989697142857, 11.4194372), 30),
    ((48.157243900000005, 11.428608266666666), 30),
    ((48.15677028, 11.41583002), 30),
    ((48.15671968, 11.41184422), 30),
    ((48.1581082, 11.41452375), 30),
    ((48.39109819, 10.843001155), 30),
    ((48.39369596, 10.83397324), 50),
    ((48.39400612, 10.83430556), 10),
    ((48.3922458125, 10.8292762375), 30),
    ((48.39123026, 10.83261854), 30),
    ((48.3901580375, 10.82898015), 50),
    ((48.39082693333333, 10.829113266666667), 50),
    ((48.390438575, 10.841022474999999), 30),
    ((48.39584829333333, 10.836955613333334), 30),
    ((48.396610949999996, 10.829414750000002), 50),
    ((48.39633473333333, 10.829673), 50),
    ((48.396729685714284, 10.825361542857141), 50),
    ((48.3989862, 10.82451082), 30),
    ((48.39560915, 10.8341229125), 30),
    ((48.39634784, 10.832283006666668), 30),
    ((48.3969976, 10.831348766666666), 30),
    ((48.3995115, 10.8329330625), 50),
    ((48.39252802857143, 10.8290638), 30),
    ((48.39126265, 10.83125555), 30),
    ((48.39208866, 10.83018544), 30),
    ((48.382180840000004, 10.82525324), 30),
]


RADIUS = 10  # meters

def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  # Earth radius in meters
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = phi2 - phi1
    dlambda = math.radians(lon2 - lon1)
    a = math.sin(dphi / 2)**2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda / 2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

@pytest.fixture(scope="module")
def db_conn():
    conn = sqlite3.connect(DB_PATH)
    yield conn
    conn.close()

@pytest.mark.parametrize("coords, expected_limit", RANDOM_COORDS)
def test_speed_limit_near_point(db_conn, coords, expected_limit):
    lat, lon = coords
    cur = db_conn.cursor()

    lat_margin = RADIUS / 111320  # meters per degree latitude
    lon_margin = RADIUS / (40075000 * math.cos(math.radians(lat)) / 360)

    cur.execute("""
        SELECT lat, lon, speed_limit FROM speed_limits
        WHERE lat BETWEEN ? AND ?
        AND lon BETWEEN ? AND ?
    """, (lat - lat_margin, lat + lat_margin, lon - lon_margin, lon + lon_margin))

    rows = cur.fetchall()
    nearby = [
        (r_lat, r_lon, r_limit)
        for r_lat, r_lon, r_limit in rows
        if haversine(lat, lon, r_lat, r_lon) <= RADIUS
    ]
    assert nearby, f"No speed limit found within {RADIUS}m of ({lat}, {lon})"

    found_limits = [limit for _, _, limit in nearby]
    assert expected_limit in found_limits, (
        f"Expected speed limit {expected_limit} not found within {RADIUS}m of ({lat}, {lon}); found: {found_limits}"
    )
